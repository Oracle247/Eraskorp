import { useEffect, useState } from 'react'
import Head from "next/head";
import AdminLayout from "@/layouts/AdminLayout"
import AuthHOC from '@/components/AuthHOC'
import Table from '@/components/Table'
import { IAdvisory } from "@/interfaces"
import Button from '@/components/Button';
import { useRouter } from 'next/router';
import usePost from '@/hooks/usePost';
import { toast } from 'react-toastify';
import Loader from '@/components/Loader';
import { BiEdit } from 'react-icons/bi';
import Link from 'next/link';
import { MdOutlineDelete } from 'react-icons/md';



const Products = () => {
  const [loading, setLoading] = useState(false)
  const [data, setData] = useState<IAdvisory[]>([])
  const router = useRouter()

  const { loading: posting, error, post, data: deleted } = usePost({
    api: "/advisory",
    method: "DELETE",
    onSuccess: () => {
      toast('Advisory deleted successfully')
    }
  })

  const deleteProduct = (id: string, route: string) => {
    post({
      id,
    }, route)
  }

  const columns = [
    {
      name: "name",
      label: "Name",
      options: {
        filter: true,
        sort: true,
      },
      extra: true,
      custom: (val: string, meta: any) => {
        return (
          <p className="text-sm text-black/70">{val?.length < 40 ? val : val.slice(0, 40) + '...'}</p>
        )
      },
    },
    {
      name: "email",
      label: "Email",
      options: {
        filter: true,
        sort: false,
      },
    },
    {
      name: "title",
      label: "Title",
      options: {
        filter: true,
        sort: false,
      },
    },
    {
      name: "number",
      label: "Number",
      options: {
        filter: true,
        sort: false,
      },
    },
    {
      name: "delete",
      label: "Action",
      extra: true,
      custom: (val: string, meta: any) => {
        return (
          <div className="gap-4 flex items-center justify-left">
            {/* <button onClick={() => deleteAdvisory(meta?._id, `advisory/${meta?._id}`)} className="p-2 px-4 bg-red-600 text-white rounded-full">Delete</button> */}
            <BiEdit onClick={() => router.push(`/admin/advisory/${meta?._id}`)} size="1.2rem" className="cursor-pointer" />
            <MdOutlineDelete onClick={() => deleteProduct(meta?._id, `advisory/${meta?._id}`)} size="1.2rem" className="text-red-400 cursor-pointer" />
          </div>
        )
      },
    },
  ];

  useEffect(() => {
    const fetchUser = async () => {
      try {
        setLoading(true)
        const res = await fetch(`/api/advisory`)
        const data = await res.json()

        if (!res.ok) throw new Error(data.message)

        console.log({ data })
        setData(data)
      } catch (error) {
        console.log({ error })
      }
      setLoading(false)

    }

    fetchUser()
  }, [deleted])

  return (
    <AdminLayout>
      <Head>
        <title>Brilliant Brains</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/faviconimg.png" />
      </Head>
      {(loading || posting) && <Loader modalOpen={true} />}
      <div className='p-4 py-12 sm:px-12 h-full overflow-y-auto'>
        <div className="flex items-center gap-4 justify-between mb-16">
          <h1 className='text-3xl text-black/70 font-argentinum'>Advisory Board</h1>
          <Button onClick={() => router.push("/admin/advisory/add")} className="text-white px-4 sm:px-6 py-2 rounded-xl text-sm whitespace-nowrap">Add Board Member</Button>
        </div>
        <Table<IAdvisory> data={data} columns={columns} className={''} />
      </div>
    </AdminLayout>
  );
}


export default AuthHOC(Products)

